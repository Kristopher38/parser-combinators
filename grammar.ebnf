<prog> ::= <expr-list>

<expr-list> ::= <expr> <expr-list>
                | eps

# <expr> ::= let <id> = <expr> in <expr>
#            | <expr> <binop> <expr>
#            | <unop> <expr>
#            | fun <arg-list> -> <expr>
#            | <const>
#            | [ <list-elems> ]
#            | ( <expr> )
#            | if <expr> then <expr> else <expr>
#            | <id>

<expr> ::= let <id> = <op-expr> in <op-expr>
           | fun <arg-list> -> <op-expr>
           | <const>
           | [ <list-elems> ]
           | ( <expr> )
           | if <op-expr> then <op-expr> else <op-expr>
           | <id>

<op-expr> ::= <expr> <binop> <expr>
              | <unop> <expr>

<binop>   ::= + | - | * | / | . | +. | -. | *. | /. | < | <= | > | >= | == | ~= | & | '|' | ^ | && | '||' | :: | .. | ,
<unop>    ::= - | ! | hd | tl | fst | snd
<arg-list> ::= <identifier> , <arg-list>
               | <identifier>
<const>   ::= -?[0-9]+ | -?[0-9]+.[0-9]* | " [\x20-\x7F] "
<id>      ::= [a-zA-Z_][0-9a-zA-Z_]+

<list-elems> ::= <expr> ; <list-elems>
                 | <expr>
